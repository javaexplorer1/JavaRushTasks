taskKey="com.javarush.games.snake.part03"\n\nИгра змейка (3/20)

Для хранения объектов игрового поля нам понадобится дополнительный класс.
Объект этого класса будет хранить координаты соответствующей ячейки.
Назовем его GameObject.


Требования:
1.	Должен существовать публичный класс GameObject.
2.	В классе GameObject должно существовать публичное поле x типа int.
3.	В классе GameObject должно существовать публичное поле y типа int.
4.	В классе GameObject должен существовать один конструктор с двумя параметрами типа int, который устанавливает соответствующие значения полям x и y.


Игра змейка (3/20)

Давай раскрасим игровое поле. Это можно сделать в методе initialize как и все остальные действия игры. Но &quot;лепить&quot;
все в один метод - плохая практика. Поэтому изначально создадим несколько необходимых методов, каждый из которых будет
отвечать за определенный кусок работы: метод drawScene - за отрисовку экрана, метод createGame - за действия, которые
нужно выполнить для создания игры. Исходя из этого нам нужно в методе initialize() вызвать метод createGame(), в котором
в свою очередь будет вызываться метод drawScene().

Чтобы окрасить ячейки игрового поля в определенный цвет нужно пройти по всем ячейкам (используй циклы) и для каждой из них
вызвать метод setCellColor.
Подсказка:
for (int x = 0; x &lt; WIDTH; x++) {
for (int y = 0; y &lt; HEIGHT; y++) {
setCellColor(x, y, Color);
}
}



Игра змейка (3/20)

Давай напишем игру &quot;Змейка&quot;.
Правила игры:
1. Игрок управляет движением змейки, которая ползает по квадратному полю: вверх, вниз, вправо и влево.
Остановить движение змейки нельзя.
2. Цель игры &mdash; съесть как можно большее количество яблок, которые появляются поочередно, в случайном месте
игрового поля, как только змейка &quot;проглотит&quot; предыдущее.
3. С каждым новым яблоком змейка растет на один сегмент (занимает на одну ячейку больше). 3. В нашей игре
на старте змейка занимает три ячейки (имеет три сегмента) и может дорасти до 28.
4. По мере того, как растет змейка, скорость игры увеличивается.
5. Змейка не может проходить &quot;сквозь себя&quot; или выходить за пределы игрового поля.
5. Игра оканчивается победой, если длина змейки увеличилась до 28 сегментов.
6. Игра оканчивается проигрышем, если касается сама себя или края поля.
Теперь приступаем к реализации игры:
Нам понадобится класс, который будет содержать логику игры. Назовем его SnakeGame. Не забудь унаследовать
его от класса Game. Этот и другие классы &quot;движка&quot; находятся в пакете com.javarush.engine.cell,
и чтобы ими пользоваться, класс SnakeGame должен содержать такой импорт:
import com.javarush.engine.cell.*;
Если ты все сделал правильно, уже можно запустить SnakeGame и увидеть пустое игровое поле.
Создай переменные для хранения ширины и высоты игрового поля.
Переопредели метод родительского класса public void initialize(): он будет содержать команды, которые
выполнятся один раз при запуске игры. Например, установка размеров игрового поля.



